%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2387 1724
%%HiResBoundingBox: 0 0 2386.0798 1723.9199
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2386.0798 1723.9199 re
W
q
[0.24 0 0 -0.24 0 1723.9199] cm
q
0 0 9941.667 7182.8696 re
W*
q
[3.124509 0 0 3.124431 0.0234288 0] cm
/DeviceRGB {} CS
[0.5373 0.4431 0.8157] SC
/DeviceRGB {} cs
[0.5373 0.4431 0.8157] sc
0 0 3181.8181 2298.9368 re
f
Q
q
[46.981419 0 0 46.980251 3305.1777 247.58253] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
32.171001 49.076 3.750999 46.701 re
f
35.208 51.412998 1.769001 13.365002 re
f
31.115999 68.771004 2.227999 22.040001 re
f
31.584999 53.530998 1.757999 12.073997 re
f
35.214001 83.601997 1.757999 12.073998 re
f
31.584999 23.754 2.460998 27.315001 re
f
6.38 25.864 26.084 1.757999 re
f
34.046001 39.229 20.633999 1.641998 re
f
48.115002 11.093 1.758999 28.136 re
f
49.874001 15.079001 21.219002 1.172001 re
f
2.863 45.558998 29.952999 2.345001 re
f
32.816002 8.631 2.393002 15.944001 re
f
21.034 6.286 6.799999 7.386 re
f
28.653999 8.631 2.931 7.972001 re
f
19.422001 17.658001 12.163 3.869 re
f
14.703 14.258 8.925 2.345 re
f
24.434 14.258 3.122 2.345 re
f
65.524002 21.834 3.122002 4.909 re
f
11.186 4.176 8.382001 9.496 re
f
2.863 7.81 7.502999 13.716 re
f
11.186 14.258 2.462 7.269 re
f
14.703 17.188999 4.221 7.972 re
f
13.648 28.326 8.324 5.275002 re
f
8.137999 28.326 4.279 9.084999 re
f
50.488998 27.85 4.278 10.441 re
f
1.456 32.868999 4.924 7.181 re
f
-4.289 28.326 11.606 3.634001 re
f
0.401 22.464001 4.807 5.158001 re
f
5.911 22.464001 4.454999 2.579 re
f
-6.868 32.868999 7.269 17.400997 re
f
61.351002 33.298 7.27 16.972 re
f
1.514 40.869999 7.914 3.633999 re
f
1.456 45.558998 0.703 15.827999 re
f
2.863 48.959 8.91 7.854999 re
f
12.417 52.887001 5.422001 6.153999 re
f
16.226999 48.959 4.807001 3.049 re
f
19.422001 53.530998 8.410999 9.262001 re
f
21.972 48.959 6.681999 3.928001 re
f
28.653999 53.473 2.462 5.568001 re
f
29.357 48.959 1.757999 3.049 re
f
26.778 37.411999 4.337 7.092999 re
f
22.674999 28.326 3.634001 16.177998 re
f
26.778 28.326 4.337 8.132999 re
f
16.813 34.773998 5.158001 9.729999 re
f
13.681 34.773998 2.513 9.729999 re
f
10.278 38.291 2.667 6.213001 re
f
7.317 38.291 2.11 1.757999 re
f
11.186 22.464001 2.462 2.579 re
f
19.568001 22.464001 5.935 2.695999 re
f
26.778 22.464001 4.337 2.579 re
f
-4.289 14.727 6.448 6.799001 re
f
-2.53 22.464001 2.11 5.158001 re
f
-4.289 51.069 5.275 5.744999 re
f
29.24 2.77 9.261999 5.04 re
f
21.034 0.776 6.799999 4.514 re
f
35.922001 8.631 6.564999 7.62 re
f
39.733002 4.176 7.444 3.634 re
f
43.455002 8.631 3.723 9.495999 re
f
38.500999 19.021 8.675999 5.012001 re
f
50.459 21.834 14.068001 5.012001 re
f
55.471001 27.638 16.207001 5.012001 re
f
40.026001 41.999001 8.968002 5.012001 re
f
37.681 52.887001 8.675999 5.012001 re
f
55.471001 33.298 5.012001 8.675999 re
f
35.922001 16.603001 1.758999 11.020001 re
f
38.571999 16.841 3.846001 1.523001 re
f
35.208 41.999001 3.995998 6.278 re
f
36.801998 49.076 2.403 1.847 re
f
40.026001 47.903999 8.968002 4.104 re
f
72.382004 24.398001 4.513001 8.251001 re
f
12.417 48.959 2.96 3.049 re
f
34.500999 28.326 9.408001 4.323002 re
f
38.500999 24.575001 8.646 3.063 re
f
44.508999 28.326 2.667999 9.965 re
f
34.500999 33.66 9.408001 4.631 re
f
51.66 3.033 10.171001 11.225 re
f
48.115002 1.949 3.048 8.558 re
f
62.886002 7.81 10.551003 6.447999 re
f
62.886002 3.59 4.198997 3.283 re
f
72.382004 15.079001 3.047996 8.675001 re
f
69.216003 17.188999 2.461998 9.657 re
f
59.956001 16.841 8.206001 4.333 re
f
55.896999 16.841 3.194 4.333 re
f
50.459 16.841 4.307999 4.333 re
f
69.216003 33.298 8.558998 7.298 re
f
69.216003 41.397999 6.213997 7.337002 re
f
52.612999 40.596001 1.245998 14.107002 re
f
49.874001 41.973999 1.785999 10.034 re
f
54.68 42.687 5.803001 5.216999 re
f
54.766998 48.587002 5.716 6.116001 re
f
47.146999 52.887001 4.513 7.911999 re
f
52.612999 55.393002 9.688 5.406002 re
f
64.057999 51.069 7.033997 6.828999 re
f
61.351002 51.069 2.223999 3.243 re
f
-5.578 94.445 79.073997 1.331001 re
f
41.790001 90.810997 0.459 4.301002 re
f
44.279999 89.639 0.459 5.473 re
f
46.948002 91.438004 0.459 3.674004 re
f
50.23 91.438004 0.459 3.674004 re
f
53.629002 91.438004 0.459 3.674004 re
f
55.242001 90.224998 0.459 4.720001 re
f
51.43 92.960999 0.459 2.359001 re
f
48.764 92.960999 0.459 2.359001 re
f
58.862 93.265999 0.459 2.359001 re
f
70.862999 93.265999 0.459 2.359001 re
f
-4.518 93.265999 0.459 2.359001 re
f
16.584 93.265999 0.459 2.359001 re
f
2.575 93.265999 0.459 2.359001 re
f
57.748001 89.639 0.459 5.473 re
f
61.122002 91.438004 0.459 3.674004 re
f
62.657001 92.023003 0.459 3.087997 re
f
66.056 91.438004 0.459 3.674004 re
f
68.987 90.810997 0.459 4.301002 re
f
15.148 91.730003 0.459 3.674004 re
f
5.681 90.810997 0.459 4.594002 re
f
-1.294 91.730003 0.459 3.674004 re
f
0.171 92.960999 0.459 2.443001 re
f
3.688 91.730003 0.459 3.674004 re
f
9.198 91.730003 0.459 3.674004 re
f
7.909 91.730003 0.459 3.674004 re
f
13.418 91.730003 0.459 3.674004 re
f
11.382 90.810997 0.459 4.594002 re
f
37.452 90.810997 0.459 4.301002 re
f
43.224998 91.438004 0.459 3.674004 re
f
40.264999 88.934998 0.459 6.177002 re
f
38.976002 87.763 0.459 7.348999 re
f
22.988001 90.810997 0.459 4.301002 re
f
25.479 89.639 0.459 5.473 re
f
28.146 91.438004 0.459 3.674004 re
f
30.007 91.124001 0.459 3.674004 re
f
18.65 90.810997 0.459 4.301002 re
f
24.424 91.438004 0.459 3.674004 re
f
21.464001 88.934998 0.459 6.177002 re
f
20.096001 92.023003 0.459 3.087997 re
f
26.549 87.763 0.459 7.348999 re
f
Q
q
[57.619419 0 0 57.617981 214.92639 4973.8916] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
15.96 6 m
15.96 20 l
13.7 20 l
13.7 10.94 l
9.5 20 l
7.64 20 l
3.46 10.96 l
3.46 20 l
1.2 20 l
1.2 6 l
3.38 6 l
8.58 17.02 l
13.78 6 l
15.96 6 l
h
26.4 6 m
24.039999 8.58 l
22.419998 8.58 l
23.819998 6 l
26.399998 6 l
26.4 6 l
h
23.24 9.42 m
25.6 9.42 28.619999 11.22 28.619999 14.82 c
28.619999 18.439999 25.599998 20.200001 23.239998 20.200001 c
20.879997 20.200001 17.859997 18.440001 17.859997 14.820001 c
17.859997 11.220001 20.879997 9.42 23.239998 9.42 c
23.24 9.42 l
h
23.24 11.34 m
21.719999 11.34 19.959999 12.5 19.959999 14.82 c
19.959999 17.119999 21.719999 18.279999 23.24 18.279999 c
24.76 18.279999 26.52 17.119999 26.52 14.819999 c
26.52 12.499999 24.76 11.339998 23.24 11.339998 c
23.24 11.34 l
h
36.139999 9.44 m
38.139999 9.44 40.099998 10.74 40.099998 13.98 c
40.099998 20 l
37.939999 20 l
37.939999 14.1 l
37.939999 12.120001 37 11.34 35.66 11.34 c
33.939999 11.34 32.82 12.940001 32.580002 13.96 c
32.580002 20 l
30.420002 20 l
30.420002 9.6 l
32.580002 9.6 l
32.580002 11.8 l
32.780003 11.16 33.980003 9.440001 36.140003 9.440001 c
36.139999 9.44 l
h
44.259998 5.86 m
44.259998 7.74 l
42.099998 7.74 l
42.099998 5.86 l
44.259998 5.86 l
h
44.259998 9.6 m
44.259998 20 l
42.099998 20 l
42.099998 9.6 l
44.259998 9.6 l
h
51.439999 9.42 m
53.32 9.42 54.939999 10.26 55.879997 11.940001 c
54.199997 12.700001 l
53.579998 11.860001 52.739998 11.340001 51.459995 11.340001 c
49.919994 11.340001 48.159996 12.500001 48.159996 14.820002 c
48.159996 17.120001 49.919994 18.260002 51.459995 18.260002 c
52.739994 18.260002 53.579994 17.760002 54.199997 16.920002 c
55.899998 17.680002 l
54.939999 19.360003 53.339996 20.180002 51.439999 20.180002 c
49.079998 20.180002 46.059998 18.440002 46.059998 14.820002 c
46.059998 11.220001 49.079998 9.420002 51.439999 9.420002 c
51.439999 9.42 l
h
62.380001 9.42 m
64.260002 9.42 65.5 10.54 65.760002 11.22 c
65.760002 9.6 l
67.920006 9.6 l
67.920006 20 l
65.760002 20 l
65.760002 18.280001 l
65.5 19.120001 64.260002 20.200001 62.380001 20.200001 c
60.02 20.200001 57.200001 18.440001 57.200001 14.800001 c
57.200001 11.220001 60.02 9.420001 62.380001 9.420001 c
62.380001 9.42 l
h
62.66 11.34 m
61.040001 11.34 59.299999 12.5 59.299999 14.8 c
59.299999 17.120001 61.040001 18.280001 62.66 18.280001 c
64.279999 18.280001 65.860001 17.140001 65.860001 14.800001 c
65.860001 12.480001 64.279999 11.340001 62.66 11.340001 c
62.66 11.34 l
h
87.480003 20 m
86.200005 17.040001 l
79.040009 17.040001 l
77.76001 20 l
75.420013 20 l
81.660011 6 l
83.580009 6 l
89.820007 20 l
87.480011 20 l
87.480003 20 l
h
79.839996 15.22 m
85.399994 15.22 l
82.619995 8.780001 l
79.839996 15.22 l
h
97.040001 9.44 m
99.040001 9.44 101 10.74 101 13.98 c
101 20 l
98.839996 20 l
98.839996 14.1 l
98.839996 12.120001 97.899994 11.34 96.559998 11.34 c
94.839996 11.34 93.720001 12.940001 93.479996 13.96 c
93.479996 20 l
91.319992 20 l
91.319992 9.6 l
93.479996 9.6 l
93.479996 11.8 l
93.679993 11.16 94.879997 9.440001 97.039993 9.440001 c
97.040001 9.44 l
h
111.160004 9.6 m
113.320007 9.6 l
113.320007 20 l
113.320007 23.139999 110.420006 24.119999 108.300011 24.119999 c
106.880013 24.119999 105.860008 23.779999 105.320007 23.419998 c
105.320007 21.619999 l
105.860008 21.98 106.860008 22.299999 108.300011 22.299999 c
110.12001 22.299999 111.160011 21.32 111.160011 20 c
111.160011 18.280001 l
110.900009 19.120001 109.660011 20.200001 107.780014 20.200001 c
105.420013 20.200001 102.600014 18.440001 102.600014 14.800001 c
102.600014 11.220001 105.420013 9.420001 107.780014 9.420001 c
109.660011 9.420001 110.900017 10.540001 111.160011 11.220001 c
111.160011 9.600001 l
111.160004 9.6 l
h
108.059998 18.280001 m
109.68 18.280001 111.259995 17.140001 111.259995 14.800001 c
111.259995 12.480001 109.679993 11.340001 108.059998 11.340001 c
106.440002 11.340001 104.699997 12.500001 104.699997 14.800001 c
104.699997 17.120001 106.439995 18.280001 108.059998 18.280001 c
h
119.279999 20.16 m
117.279999 20.16 115.32 18.860001 115.32 15.62 c
115.32 9.6 l
117.480003 9.6 l
117.480003 15.5 l
117.480003 17.48 118.420006 18.26 119.760002 18.26 c
121.480003 18.26 122.600006 16.66 122.840004 15.64 c
122.840004 9.6 l
125.000008 9.6 l
125.000008 20 l
122.840004 20 l
122.840004 17.799999 l
122.640007 18.439999 121.440002 20.16 119.280006 20.16 c
119.279999 20.16 l
h
129.360001 5.86 m
129.360001 20 l
127.199997 20 l
127.199997 5.86 l
129.360001 5.86 l
129.360001 5.86 l
h
136.539993 9.42 m
138.899994 9.42 141.919998 11.22 141.919998 14.82 c
141.919998 18.439999 138.899994 20.200001 136.539993 20.200001 c
134.179993 20.200001 131.159988 18.440001 131.159988 14.820001 c
131.159988 11.220001 134.179993 9.42 136.539993 9.42 c
h
136.539993 11.34 m
135.019989 11.34 133.259995 12.5 133.259995 14.82 c
133.259995 17.119999 135.019989 18.279999 136.539993 18.279999 c
138.059998 18.279999 139.819992 17.119999 139.819992 14.819999 c
139.819992 12.499999 138.059998 11.339998 136.539993 11.339998 c
136.539993 11.34 l
h
156.979996 12.28 m
158.659988 12.679999 159.959991 14.12 159.959991 15.96 c
159.959991 18.459999 158.359985 20 154.87999 20 c
149.819992 20 l
149.819992 6 l
154.779999 6 l
157.600006 6 159 7.6 159 9.440001 c
159 10.84 158.160004 11.820001 156.979996 12.280001 c
156.979996 12.28 l
h
154.600006 7.94 m
152.020004 7.94 l
152.020004 11.6 l
154.600006 11.6 l
156.040009 11.6 156.820007 10.84 156.820007 9.76 c
156.820007 8.62 156.040009 7.940001 154.600006 7.940001 c
154.600006 7.94 l
h
154.779999 18.059999 m
156.839996 18.059999 157.759995 17.219999 157.759995 15.719999 c
157.759995 14.44 156.839996 13.4 154.779999 13.4 c
152.020004 13.4 l
152.020004 18.059999 l
154.779999 18.059999 l
h
162.619995 20.1 m
161.860001 20.1 161.360001 19.6 161.360001 18.84 c
161.360001 18.08 161.860001 17.58 162.619995 17.58 c
163.37999 17.58 163.87999 18.08 163.87999 18.84 c
163.87999 19.6 163.37999 20.1 162.619995 20.1 c
h
f
Q
q
[17.353489 0 0 17.353056 2677.6389 6546.5635] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
12.04 20 m
9.26 20 l
6.14 15.24 l
6.02 15.24 l
3.82 15.24 l
3.82 20 l
1.200001 20 l
1.200001 6 l
6.02 6 l
9.160001 6 11.14 7.92 11.14 10.7 c
11.14 12.639999 10.18 14.08 8.540001 14.78 c
12.04 20 l
h
3.82 8.42 m
3.82 12.98 l
5.88 12.98 l
7.46 12.98 8.520001 12.299999 8.520001 10.7 c
8.520001 9.12 7.460001 8.42 5.88 8.42 c
3.82 8.42 l
3.82 8.42 l
h
31.948 17.58 m
38.048 17.58 l
38.048 20 l
31.548 20 l
29.328001 20 l
29.328001 6 l
31.948002 6 l
37.868004 6 l
37.868004 8.42 l
31.948004 8.42 l
31.948004 11.780001 l
36.448006 11.780001 l
36.448006 14.140001 l
31.948006 14.140001 l
31.948006 17.580002 l
31.948 17.58 l
h
60.155998 5.76 m
62.535999 5.76 64.115997 7.28 64.815994 8.66 c
62.875996 9.8 l
62.135994 8.7 61.335995 8.08 60.155994 8.08 c
59.035995 8.08 58.235992 8.74 58.235992 9.639999 c
58.235992 10.499999 58.755993 10.999999 59.955994 11.44 c
60.915993 11.799999 l
63.895992 12.859999 65.195992 14.16 65.195992 16.16 c
65.195992 18.879999 62.61599 20.299999 60.235992 20.299999 c
57.735992 20.299999 55.775993 18.82 55.135994 16.859999 c
57.155994 15.799999 l
57.655994 16.92 58.595993 17.919998 60.235992 17.919998 c
61.475994 17.919998 62.475994 17.319998 62.475994 16.199999 c
62.475994 15.059999 61.755993 14.559999 60.195995 13.979999 c
59.295994 13.659999 l
57.215996 12.899999 55.635994 11.859999 55.635994 9.539999 c
55.635994 7.339999 57.655994 5.759999 60.155994 5.759999 c
60.155998 5.76 l
h
85.204002 17.58 m
91.304001 17.58 l
91.304001 20 l
84.804001 20 l
82.584 20 l
82.584 6 l
85.204002 6 l
91.124001 6 l
91.124001 8.42 l
85.204002 8.42 l
85.204002 11.780001 l
89.704002 11.780001 l
89.704002 14.140001 l
85.204002 14.140001 l
85.204002 17.580002 l
85.204002 17.58 l
h
119.711998 20 m
118.551994 17.299999 l
111.631996 17.299999 l
110.471992 20 l
107.691994 20 l
113.931992 6 l
116.271988 6 l
122.491989 20 l
119.71199 20 l
119.711998 20 l
h
112.552002 15.16 m
117.632004 15.16 l
115.092003 9.24 l
112.552002 15.16 l
h
150.419998 20 m
147.639999 20 l
144.520004 15.24 l
144.400009 15.24 l
142.200012 15.24 l
142.200012 20 l
139.580017 20 l
139.580017 6 l
144.400024 6 l
147.540024 6 149.52002 7.92 149.52002 10.7 c
149.52002 12.639999 148.560013 14.08 146.920013 14.78 c
150.419998 20 l
h
142.199997 8.42 m
142.199997 12.98 l
144.259995 12.98 l
145.839996 12.98 146.899994 12.299999 146.899994 10.7 c
146.899994 9.12 145.839996 8.42 144.259995 8.42 c
142.199997 8.42 l
h
179.42799 18.5 m
178.168 19.6 176.528 20.200001 174.668 20.200001 c
170.828 20.200001 167.408005 17.240002 167.408005 13.000001 c
167.408005 8.76 170.828 5.800001 174.668 5.800001 c
176.508 5.800001 178.12801 6.400001 179.34799 7.460001 c
177.76799 9.260001 l
176.96799 8.660001 175.90799 8.260001 174.82799 8.260001 c
172.22798 8.260001 170.12799 10.240002 170.12799 13.000001 c
170.12799 15.76 172.228 17.740002 174.82799 17.740002 c
175.92799 17.740002 177.02798 17.320002 177.84799 16.660002 c
179.42799 18.5 l
h
205.436 6 m
208.056 6 l
208.056 20 l
205.436 20 l
205.436 14.24 l
199.436 14.24 l
199.436 20 l
196.81601 20 l
196.81601 6 l
199.436 6 l
199.436 11.82 l
205.436 11.82 l
205.436 6 l
205.436 6 l
h
228.564 17.58 m
234.664 17.58 l
234.664 20 l
228.164 20 l
225.944 20 l
225.944 6 l
228.564 6 l
234.48399 6 l
234.48399 8.42 l
228.564 8.42 l
228.564 11.780001 l
233.064 11.780001 l
233.064 14.140001 l
228.564 14.140001 l
228.564 17.580002 l
228.564 17.58 l
h
263.09201 20 m
260.31201 20 l
257.19202 15.24 l
257.07202 15.24 l
254.87202 15.24 l
254.87202 20 l
252.25203 20 l
252.25203 6 l
257.07202 6 l
260.21204 6 262.19202 7.92 262.19202 10.7 c
262.19202 12.639999 261.23203 14.08 259.59201 14.78 c
263.09201 20 l
h
254.87199 8.42 m
254.87199 12.98 l
256.93201 12.98 l
258.51199 12.98 259.57202 12.299999 259.57202 10.7 c
259.57202 9.12 258.51202 8.42 256.93201 8.42 c
254.87201 8.42 l
254.87199 8.42 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
